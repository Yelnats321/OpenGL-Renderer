#version 330

in vec3 Color;
in vec3 NormalCamSpace;
in vec3 PositionWorldSpace;
in vec3 EyeDir;
in vec3 LightDirCamSpace;
uniform vec3 lightPos;
uniform float ambientIntensity;

layout(location = 0)out vec3 outColor;

void main() {
	vec3 n = normalize(NormalCamSpace);
	vec3 l = normalize(LightDirCamSpace);
	float cosTheta = clamp(dot(n, l),0,1);

	vec3 E = normalize(EyeDir);
	vec3 halfAng = normalize (l + E);
	float gauss = acos(dot(n,halfAng));
	float expo = gauss /0.05;
	expo= -(expo * expo);
	float cosAlpha = exp(expo);
	//vec3 R = reflect(-l, n);
	//float cosAlpha = clamp(dot(E, R),0,1);
	//cosAlpha = pow(cosAlpha, 5);
	//cosAlpha = (cosTheta != 0.0 ? cosAlpha:0);

	vec3 lightVec = lightPos-PositionWorldSpace;
	float attenIntensity = 1/(1.0 +dot(lightVec, lightVec));
	float lightPower = 6;
	outColor = Color* lightPower * cosTheta *attenIntensity+
		Color * lightPower* cosAlpha *attenIntensity+
		Color * ambientIntensity;
}

