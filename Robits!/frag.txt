#version 330

in vec3 NormalCamSpace;
in vec3 PositionWorldSpace;
in vec3 EyeDir;
in vec3 LightDirCamSpace;
in vec2 UV;
uniform vec3 lightPos;
uniform float ambientIntensity;
uniform sampler2D texSampler;
uniform vec3 ambientColor;
uniform vec3 specularColor;
uniform vec3 diffuseColor;

layout(location = 0)out vec3 outColor;

void main() {
	vec3 n = normalize(NormalCamSpace);
	vec3 l = normalize(LightDirCamSpace);
	float cosTheta = clamp(dot(n, l),0,1);

	vec3 E = normalize(EyeDir);
	vec3 halfAng = normalize (l + E);

	/*float gauss = acos(dot(n,halfAng));
	float expo = gauss/0.01;
	expo= -(expo * expo);
	float cosAlpha = exp(expo);*/

	float cosAlpha = clamp(dot(n, halfAng),0,1);
	cosAlpha = pow(cosAlpha, 5);

	float lightPower = 3;
	vec3 lightVec = lightPos-PositionWorldSpace;
	float attenIntensity = 1/(1.0 +dot(lightVec, lightVec));
	outColor = texture(texSampler, vec2(UV.x, 1-UV.y)).rgb* diffuseColor * lightPower* cosTheta *attenIntensity+
		specularColor* lightPower* cosAlpha *attenIntensity+
		ambientColor* ambientIntensity;
}

